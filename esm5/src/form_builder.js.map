{"version":3,"file":"form_builder.js","sourceRoot":"","sources":["../../../../../packages/forms/src/form_builder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, AbstractControlOptions, FormArray, FormControl, FormGroup, FormHooks} from './model';\n\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * @publicApi\n */\n@Injectable()\nexport class FormBuilder {\n  /**\n   * @description\n   * Construct a new `FormGroup` instance.\n   *\n   * @param controlsConfig A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param legacyOrOpts Configuration options object for the `FormGroup`. The object can\n   * have two shapes:\n   *\n   * 1) `AbstractControlOptions` object (preferred), which consists of:\n   * * `validators`: A synchronous validator function, or an array of validator functions\n   * * `asyncValidators`: A single async validator or array of async validator functions\n   * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n   * submit')\n   *\n   * 2) Legacy configuration object, which consists of:\n   * * `validator`: A synchronous validator function, or an array of validator functions\n   * * `asyncValidator`: A single async validator or array of async validator functions\n   *\n   */\n  group(controlsConfig: {[key: string]: any}, legacyOrOpts: {[key: string]: any}|null = null):\n      FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n\n    let validators: ValidatorFn|ValidatorFn[]|null = null;\n    let asyncValidators: AsyncValidatorFn|AsyncValidatorFn[]|null = null;\n    let updateOn: FormHooks|undefined = undefined;\n\n    if (legacyOrOpts != null &&\n        (legacyOrOpts.asyncValidator !== undefined || legacyOrOpts.validator !== undefined)) {\n      // `legacyOrOpts` are legacy form group options\n      validators = legacyOrOpts.validator != null ? legacyOrOpts.validator : null;\n      asyncValidators = legacyOrOpts.asyncValidator != null ? legacyOrOpts.asyncValidator : null;\n    } else if (legacyOrOpts != null) {\n      // `legacyOrOpts` are `AbstractControlOptions`\n      validators = legacyOrOpts.validators != null ? legacyOrOpts.validators : null;\n      asyncValidators = legacyOrOpts.asyncValidators != null ? legacyOrOpts.asyncValidators : null;\n      updateOn = legacyOrOpts.updateOn != null ? legacyOrOpts.updateOn : undefined;\n    }\n\n    return new FormGroup(controls, {asyncValidators, updateOn, validators});\n  }\n\n  /**\n   * @description\n   * Construct a new `FormControl` with the given state, validators and options.\n   *\n   * @param formState Initializes the control with an initial state value, or\n   * with an object that contains both a value and a disabled status.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator\n   * functions.\n   *\n   * @usageNotes\n   *\n   * ### Initialize a control as disabled\n   *\n   * The following example returns a control with an initial value in a disabled state.\n   *\n   * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n   *   linenums=\"false\" region=\"disabled-control\">\n   * </code-example>\n   */\n  control(\n      formState: any, validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validatorOrOpts, asyncValidator);\n  }\n\n  /**\n   * Constructs a new `FormArray` from the given array of configurations,\n   * validators and options.\n   *\n   * @param controlsConfig An array of child controls or control configs. Each\n   * child control is given an index when it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator\n   * functions.\n   */\n  array(\n      controlsConfig: any[],\n      validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validatorOrOpts, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n}\n"]}