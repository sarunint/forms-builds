{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../../packages/forms/src/directives/validators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, SimpleChanges, StaticProvider, forwardRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n/**\n * @description\n * Defines the map of errors returned from failed validation checks\n *\n * @publicApi\n */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface Validator {\n  /**\n   * @description\n   * Method that performs synchronous validation against the provided control.\n   *\n   * @param c The control to validate against.\n   *\n   * @returns A map of validation errors if validation fails,\n   * otherwise null.\n   */\n  validate(control: AbstractControl): ValidationErrors|null;\n\n  /**\n   * @description\n   * Registers a callback function to call when the validator inputs change.\n   *\n   * @param fn The callback function\n   */\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of as observableOf } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return observableOf({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface AsyncValidator extends Validator {\n  /**\n   * @description\n   * Method that performs async validation against the provided control.\n   *\n   * @param c The control to validate against.\n   *\n   * @returns A promise or observable that resolves a map of validation errors\n   * if validation fails, otherwise null.\n   */\n  validate(control: AbstractControl):\n      Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\nexport const REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const CHECKBOX_REQUIRED_VALIDATOR: StaticProvider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class RequiredValidator implements Validator {\n  // TODO(issue/24571): remove '!'.\n  private _required !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  @Input()\n  get required(): boolean|string { return this._required; }\n\n  set required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n}\n\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class CheckboxRequiredValidator extends RequiredValidator {\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(control) : null;\n  }\n}\n\n/**\n * Provider which adds `EmailValidator` to `NG_VALIDATORS`.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the `NG_VALIDATORS` binding.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n})\nexport class EmailValidator implements Validator {\n  // TODO(issue/24571): remove '!'.\n  private _enabled !: boolean;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  @Input()\n  set email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n}\n\n/**\n * @publicApi\n */\nexport interface ValidatorFn { (control: AbstractControl): ValidationErrors|null; }\n\n/**\n * @publicApi\n */\nexport interface AsyncValidatorFn {\n  (control: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\n/**\n * Provider which adds `MinLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the `MinLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n})\nexport class MinLengthValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() minlength !: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(control);\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\n}\n\n/**\n * Provider which adds `MaxLengthValidator` to `NG_VALIDATORS`.\n *\n * @usageNotes\n * ### Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the `MaxLengthValidator` for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `maxlength` attribute.\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n})\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() maxlength !: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(control) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\n}\n\n\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the `NG_VALIDATORS` binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n})\nexport class PatternValidator implements Validator,\n    OnChanges {\n  // TODO(issue/24571): remove '!'.\n  private _validator !: ValidatorFn;\n  // TODO(issue/24571): remove '!'.\n  private _onChange !: () => void;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() pattern !: string | RegExp;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors|null { return this._validator(control); }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\n}\n"]}