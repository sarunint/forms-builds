{"version":3,"file":"ng_model.js","sourceRoot":"","sources":["../../../../../../packages/forms/src/directives/ng_model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @description\n *\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated `FormControl` (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in `AbstractControlDirective`.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n})\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n  public readonly control: FormControl = new FormControl();\n  /** @internal */\n  _registered = false;\n  viewModel: any;\n\n  // TODO(issue/24571): remove '!'.\n  @Input() name !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input('disabled') isDisabled !: boolean;\n  @Input('ngModel') model: any;\n\n  /**\n   * Options object for this `ngModel` instance. You can configure the following properties:\n   *\n   * **name**: An alternative to setting the name attribute on the form control element.\n   * Sometimes, especially with custom form components, the name attribute might be used\n   * as an `@Input` property for a different purpose. In cases like these, you can configure\n   * the `ngModel` name through this option.\n   *\n   * ```html\n   * <form>\n   *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n   *   </my-person-control>\n   * </form>\n   * <!-- form value: {user: ''} -->\n   * ```\n   *\n   * **standalone**: Defaults to false. If this is set to true, the `ngModel` will not\n   * register itself with its parent form, and will act as if it's not in the form. This\n   * can be handy if you have form meta-controls, a.k.a. form elements nested in\n   * the `<form>` tag that control the display of the form, but don't contain form data.\n   *\n   * ```html\n   * <form>\n   *   <input name=\"login\" ngModel placeholder=\"Login\">\n   *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n   * </form>\n   * <!-- form value: {login: ''} -->\n   * ```\n   *\n   * **updateOn**: Defaults to `'change'`. Defines the event upon which the form control\n   * value and validity will update. Also accepts `'blur'` and `'submit'`.\n   *\n   * ```html\n   * <input [(ngModel)]=\"firstName\" [ngModelOptions]=\"{updateOn: 'blur'}\">\n   * ```\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelOptions')\n  options !: {name?: string, standalone?: boolean, updateOn?: FormHooks};\n\n  @Output('ngModelChange') update = new EventEmitter();\n\n  constructor(@Optional() @Host() parent: ControlContainer,\n              @Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n              @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n              @Optional() @Self() @Inject(NG_VALUE_ACCESSOR)\n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              ngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n\n              get path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n\n              get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n              get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _setUpControl(): void {\n                this._setUpdateStrategy();\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n\n              private _setUpdateStrategy(): void {\n                if (this.options && this.options.updateOn != null) {\n                  this.control._updateOn = this.options.updateOn;\n                }\n              }\n\n              private _isStandalone(): boolean {\n                return !this._parent || !!(this.options && this.options.standalone);\n              }\n\n              private _setUpStandalone(): void {\n                setUpControl(this.control, this);\n                this.control.updateValueAndValidity({emitEvent: false});\n              }\n\n              private _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n\n              private _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n\n              private _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n\n              private _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n\n              private _updateDisabled(changes: SimpleChanges) {\n                const disabledValue = changes['isDisabled'].currentValue;\n\n                const isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\n}\n"]}