{"version":3,"file":"range_value_accessor.js","sourceRoot":"","sources":["../../../../../../packages/forms/src/directives/range_value_accessor.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAkB,UAAU,EAAC,MAAM,eAAe,CAAC;AAE3F,OAAO,EAAuB,iBAAiB,EAAC,MAAM,0BAA0B,CAAC;;AAEjF,WAAa,oBAAoB,GAAmB;IAClD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,kBAAkB,EAAlB,CAAkB,CAAC;IACjD,KAAK,EAAE,IAAI;CACZ,CAAC;;;;;;;;;;;;;;;;IA8BA,4BAAoB,SAAoB,EAAU,WAAuB;QAArD,cAAS,GAAT,SAAS,CAAW;QAAU,gBAAW,GAAX,WAAW,CAAY;QAHzE,gBAAW,UAAC,CAAM,KAAO,CAAC;QAC1B,iBAAY,eAAQ,CAAC;KAEwD;;;;;IAE7E,uCAAU;;;;IAAV,UAAW,KAAU;QACnB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;KACxF;;;;;IAED,6CAAgB;;;;IAAhB,UAAiB,EAA4B;QAC3C,IAAI,CAAC,QAAQ,GAAG,UAAC,KAAK,IAAO,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;KAC5E;;;;;IAED,8CAAiB;;;;IAAjB,UAAkB,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE;;;;;IAEhE,6CAAgB;;;;IAAhB,UAAiB,UAAmB;QAClC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;KACpF;;gBA5BF,SAAS,SAAC;oBACT,QAAQ,EACJ,8FAA8F;oBAClG,IAAI,EAAE;wBACJ,UAAU,EAAE,+BAA+B;wBAC3C,SAAS,EAAE,+BAA+B;wBAC1C,QAAQ,EAAE,aAAa;qBACxB;oBACD,SAAS,EAAE,CAAC,oBAAoB,CAAC;iBAClC;;;;gBAjC8B,SAAS;gBAArB,UAAU;;6BAR7B;;SA0Ca,kBAAkB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer2, StaticProvider, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const RANGE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * `NgModel`, `FormControlDirective`, and `FormControlName` directives.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <input type=\"range\" [(ngModel)]=\"age\" >\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n})\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n\n  registerOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n"]}