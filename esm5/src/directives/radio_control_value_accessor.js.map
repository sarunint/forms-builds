{"version":3,"file":"radio_control_value_accessor.js","sourceRoot":"","sources":["../../../../../../packages/forms/src/directives/radio_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\n@Injectable()\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\n}\n\n/**\n * @description\n *\n * Writes radio control values and listens to radio control changes.\n *\n * Used by `NgModel`, `FormControlDirective`, and `FormControlName`\n * to keep the view synced with the `FormControl` model.\n *\n * If you have imported the `FormsModule` or the `ReactiveFormsModule`, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * @usageNotes\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n})\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _state !: boolean;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _control !: NgControl;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _fn !: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n  // TODO(issue/24571): remove '!'.\n  @Input() name !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input() formControlName !: string;\n  @Input() value: any;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      private _registry: RadioControlRegistry, private _injector: Injector) {}\n\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  ngOnDestroy(): void { this._registry.remove(this); }\n\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  fireUncheck(value: any): void { this.writeValue(value); }\n\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  private _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n\n  private _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\n}\n"]}