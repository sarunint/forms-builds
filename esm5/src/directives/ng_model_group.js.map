{"version":3,"file":"ng_model_group.js","sourceRoot":"","sources":["../../../../../../packages/forms/src/directives/ng_model_group.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAqB,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AAEtH,OAAO,EAAC,mBAAmB,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAEjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAC;AACjC,OAAO,EAAC,oBAAoB,EAAC,MAAM,0BAA0B,CAAC;;AAE9D,WAAa,kBAAkB,GAAQ;IACrC,OAAO,EAAE,gBAAgB;IACzB,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,YAAY,EAAZ,CAAY,CAAC;CAC5C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;IAyBgC,wCAA0B;IAI1D,sBACwB,MAAwB,EACD,UAAiB,EACX,eAAsB;QAH3E,YAIE,iBAAO,SAIR;QAHC,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,KAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;;KACzC;IAED,gBAAgB;;;;;IAChB,uCAAgB;;;;IAAhB;QACE,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,YAAY,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,YAAY,MAAM,CAAC,EAAE;YAChF,oBAAoB,CAAC,yBAAyB,EAAE,CAAC;SAClD;KACF;;gBApBF,SAAS,SAAC,EAAC,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,CAAC,kBAAkB,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAC;;;;gBA/B1F,gBAAgB,uBAqCjB,IAAI,YAAI,QAAQ;4CAChB,QAAQ,YAAI,IAAI,YAAI,MAAM,SAAC,aAAa;4CACxC,QAAQ,YAAI,IAAI,YAAI,MAAM,SAAC,mBAAmB;;;uBALlD,KAAK,SAAC,cAAc;;uBA/CvB;EA6CkC,0BAA0B;SAA/C,YAAY","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\nexport const modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n\n/**\n * @description\n *\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'})\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelGroup') name !: string;\n\n  constructor(\n      @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\n}\n"]}