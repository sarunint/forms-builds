{"version":3,"file":"ng_form.js","sourceRoot":"","sources":["../../../../../packages/forms/src/directives/ng_form.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAgB,SAAS,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AAEhH,OAAO,EAA+B,SAAS,EAAY,MAAM,UAAU,CAAC;AAC5E,OAAO,EAAC,mBAAmB,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAEjE,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AAKrD,OAAO,EAAC,sBAAsB,EAAE,iBAAiB,EAAE,SAAS,EAAE,YAAY,EAAE,kBAAkB,EAAE,mBAAmB,EAAC,MAAM,UAAU,CAAC;;AAErI,aAAa,qBAAqB,GAAQ;IACxC,OAAO,EAAE,gBAAgB;IACzB,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC;CACtC,CAAC;;AAEF,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4D9C,MAAM,OAAO,MAAO,SAAQ,gBAAgB;;;;;IA0B1C,YAC+C,UAAiB,EACX,eAAsB;QACzE,KAAK,EAAE,CAAC;yBA3B2B,KAAK;2BAET,EAAE;QAGnC,gBAAW,IAAI,YAAY,EAAE,CAAC;QAuB5B,IAAI,CAAC,IAAI;YACL,IAAI,SAAS,CAAC,EAAE,EAAE,iBAAiB,CAAC,UAAU,CAAC,EAAE,sBAAsB,CAAC,eAAe,CAAC,CAAC,CAAC;KAC/F;;;;IAED,eAAe,KAAK,IAAI,CAAC,kBAAkB,EAAE,CAAC,EAAE;;;;IAEhD,IAAI,aAAa,KAAW,OAAO,IAAI,CAAC,EAAE;;;;IAE1C,IAAI,OAAO,KAAgB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;;;;IAE9C,IAAI,IAAI,KAAe,OAAO,EAAE,CAAC,EAAE;;;;IAEnC,IAAI,QAAQ,KAAuC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IAE/E,UAAU,CAAC,GAAY;QACrB,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;;YACxB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChD,mBAAC,GAA4B,EAAC,CAAC,OAAO,qBACrB,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,CAAA,CAAC;YAClE,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC/B,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;YACvD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC5B,CAAC,CAAC;KACJ;;;;;IAED,UAAU,CAAC,GAAY,IAAiB,yBAAoB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAC,EAAE;;;;;IAEtF,aAAa,CAAC,GAAY;QACxB,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;;YACxB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,SAAS,EAAE;gBACb,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aACnC;YACD,SAAS,CAAU,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;SAC3C,CAAC,CAAC;KACJ;;;;;IAED,YAAY,CAAC,GAAiB;QAC5B,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;;YACxB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;YAChD,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;YAChC,kBAAkB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC/B,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3C,KAAK,CAAC,sBAAsB,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;SAClD,CAAC,CAAC;KACJ;;;;;IAED,eAAe,CAAC,GAAiB;QAC/B,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;;YACxB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,SAAS,EAAE;gBACb,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aACnC;SACF,CAAC,CAAC;KACJ;;;;;IAED,YAAY,CAAC,GAAiB,IAAe,yBAAkB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAC,EAAE;;;;;;IAEzF,WAAW,CAAC,GAAc,EAAE,KAAU;QACpC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;;YACxB,MAAM,IAAI,qBAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,oBAAC,GAAG,CAAC,IAAI,GAAG,EAAC;YACpD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ;;;;;IAED,QAAQ,CAAC,KAA2B,IAAU,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;;;;;IAE7E,QAAQ,CAAC,MAAa;QACpB,mBAAC,IAA2B,EAAC,CAAC,SAAS,GAAG,IAAI,CAAC;QAC/C,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,OAAO,KAAK,CAAC;KACd;;;;IAED,OAAO,KAAW,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE;;;;;IAErC,SAAS,CAAC,QAAa,SAAS;QAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvB,mBAAC,IAA2B,EAAC,CAAC,SAAS,GAAG,KAAK,CAAC;KACjD;;;;IAEO,kBAAkB;QACxB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,EAAE;YACjD,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC7C;;;;;;;IAIH,cAAc,CAAC,IAAc;QAC3B,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;KACjE;;;YAhIF,SAAS,SAAC;gBACT,QAAQ,EAAE,+DAA+D;gBACzE,SAAS,EAAE,CAAC,qBAAqB,CAAC;gBAClC,IAAI,EAAE,EAAC,UAAU,EAAE,kBAAkB,EAAE,SAAS,EAAE,WAAW,EAAC;gBAC9D,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,QAAQ,EAAE,QAAQ;aACnB;;;;wCA4BM,QAAQ,YAAI,IAAI,YAAI,MAAM,SAAC,aAAa;wCACxC,QAAQ,YAAI,IAAI,YAAI,MAAM,SAAC,mBAAmB;;;sBAJlD,KAAK,SAAC,eAAe","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterViewInit, Directive, EventEmitter, Inject, Input, Optional, Self, forwardRef} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup, FormHooks} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, removeDir, setUpControl, setUpFormContainer, syncPendingControls} from './shared';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @description\n *\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use `NgModel` with a\n * `name` attribute.  You can also use `NgModelGroup` if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed\n * in Angular v9.\n *\n * This has been deprecated to keep selectors consistent with other core Angular selectors,\n * as element selectors are typically written in kebab-case.\n *\n * Now deprecated:\n * ```html\n * <ngForm #myForm=\"ngForm\">\n * ```\n *\n * After:\n * ```html\n * <ng-form #myForm=\"ngForm\">\n * ```\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n})\nexport class NgForm extends ControlContainer implements Form,\n    AfterViewInit {\n  public readonly submitted: boolean = false;\n\n  private _directives: NgModel[] = [];\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n\n  /**\n   * Options for the `NgForm` instance. Accepts the following properties:\n   *\n   * **updateOn**: Serves as the default `updateOn` value for all child `NgModels` below it\n   * (unless a child has explicitly set its own value for this in `ngModelOptions`).\n   * Potential values: `'change'` | `'blur'` | `'submit'`\n   *\n   * ```html\n   * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n   *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n   * </form>\n   * ```\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngFormOptions') options !: {updateOn?: FormHooks};\n\n  constructor(\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n\n  ngAfterViewInit() { this._setUpdateStrategy(); }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      (dir as{control: FormControl}).control =\n          <FormControl>container.registerControl(dir.name, dir.control);\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n      this._directives.push(dir);\n    });\n  }\n\n  getControl(dir: NgModel): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n      removeDir<NgModel>(this._directives, dir);\n    });\n  }\n\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  getFormGroup(dir: NgModelGroup): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path !);\n      ctrl.setValue(value);\n    });\n  }\n\n  setValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n\n  onSubmit($event: Event): boolean {\n    (this as{submitted: boolean}).submitted = true;\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    (this as{submitted: boolean}).submitted = false;\n  }\n\n  private _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\n}\n"]}