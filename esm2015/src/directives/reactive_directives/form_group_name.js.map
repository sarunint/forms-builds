{"version":3,"file":"form_group_name.js","sourceRoot":"","sources":["../../../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n * \n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n * \n * ### Access the group by name\n * \n * The following example uses the {@link AbstractControl#get get} method to access the \n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n * \n * ### Access individual controls in the group\n * \n * The following example uses the {@link AbstractControl#get get} method to access \n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n * \n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({selector: '[formGroupName]', providers: [formGroupNameProvider]})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  /**\n   * @description\n   * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formGroupName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n * \n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({selector: '[formArrayName]', providers: [formArrayNameProvider]})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n  /**\n   * @description\n   * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formArrayName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /**\n   * @description\n   * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n   *\n   * @throws If the directive does not have a valid parent.\n   */\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective !.addFormArray(this);\n  }\n\n  /**\n   * @description\n   * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n   */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n\n  /**\n   * @description\n   * The `FormArray` bound to this directive.\n   */\n  get control(): FormArray { return this.formDirective !.getFormArray(this); }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): FormGroupDirective|null {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  /**\n   * @description\n   * Synchronous validator function composed of all the synchronous validators registered with this\n   * directive.\n   */\n  get validator(): ValidatorFn|null { return composeValidators(this._validators); }\n\n  /**\n   * @description\n   * Async validator function composed of all the async validators registered with this directive.\n   */\n  get asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n\n  private _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\n}\n\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n"]}