{"version":3,"file":"select_multiple_control_value_accessor.js","sourceRoot":"","sources":["../../../../../packages/forms/src/directives/select_multiple_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer2, StaticProvider, forwardRef, ÉµlooseIdentical as looseIdentical} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_MULTIPLE_VALUE_ACCESSOR: StaticProvider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n\n/** Mock interface for HTMLCollection */\nabstract class HTMLCollection {\n  // TODO(issue/24571): remove '!'.\n  length !: number;\n  abstract item(_: number): HTMLOption;\n}\n\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n * @usageNotes\n * ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * ### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n})\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  @Input()\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\n\n  private _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    let optionSelectedStateSetter: (opt: NgSelectMultipleOption, o: any) => void;\n    if (Array.isArray(value)) {\n      // convert values to ids\n      const ids = value.map((v) => this._getOptionId(v));\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n    } else {\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n    }\n    this._optionMap.forEach(optionSelectedStateSetter);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        const options: HTMLCollection = _.selectedOptions;\n        for (let i = 0; i < options.length; i++) {\n          const opt: any = options.item(i);\n          const val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const options: HTMLCollection = <HTMLCollection>_.options;\n        for (let i = 0; i < options.length; i++) {\n          const opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      this.value = selected;\n      fn(selected);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(value: NgSelectMultipleOption): string {\n    const id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string|null {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id) !._value, value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) !._value : valueString;\n  }\n}\n\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: 'option'})\nexport class NgSelectMultipleOption implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  id !: string;\n  /** @internal */\n  _value: any;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer2,\n      @Optional() @Host() private _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n\n  @Input('ngValue')\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  @Input('value')\n  set value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @internal */\n  _setSelected(selected: boolean) {\n    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n}\n"]}